{"version":3,"sources":["utility/constants.js","redux/slices/settingsSlice.js","components/Settings/Settings.jsx","components/App/App.jsx","reportWebVitals.js","redux/slices/answerSlice.js","redux/store.js","index.jsx"],"names":["ALL_CONJUGATION_SETTINGS","CONJUGATION_SETTINGS_KEY","settingsSlice","createSlice","name","initialState","conjugations","reduce","o","key","JSON","parse","localStorage","getItem","reducers","setConjugationSetting","state","action","payload","value","actions","selectConjugationSettings","settings","Settings","conjugationSettings","useSelector","dispatch","useDispatch","handleConjugationChange","event","setItem","target","stringify","checked","className","FormControl","component","FormGroup","FormLabel","map","conjugationName","conjugationIndex","FormControlLabel","control","Checkbox","onChange","label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","answerSlice","writtenAnswer","setWrittenAnswer","configureStore","reducer","answer","answerReducer","settingsReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"8SAAaA,EAA2B,CAAC,iBAAkB,QAE9CC,EAA2B,yBCC3BC,EAAgBC,YAAY,CACrCC,KAAM,WACNC,aAAc,CACVC,aAAcN,EAAyBO,QAAO,SAACC,EAAGC,GAAJ,yBAAC,eAAgBD,GAAjB,kBAAqBC,EAAMC,KAAKC,MAAL,UAAWC,aAAaC,QAAQZ,EAA2BQ,UAA3D,QAAmE,YAAW,KAE3JK,SAAU,CACNC,sBAAuB,SAACC,EAAOC,GAC3BD,EAAMV,aAAaW,EAAOC,QAAQT,KAAOQ,EAAOC,QAAQC,UAKrDJ,EAA0Bb,EAAckB,QAAxCL,sBAEFM,EAA4B,SAAAL,GAAK,OAAIA,EAAMM,SAAShB,cAElDJ,IAAf,Q,QCbe,SAASqB,IACpB,IAAMC,EAAsBC,YAAYJ,GAClCK,EAAWC,cAEjB,SAASC,EAAwBC,GAC7BjB,aAAakB,QAAQ7B,EAA2B4B,EAAME,OAAO3B,KAAMM,KAAKsB,UAAUH,EAAME,OAAOE,UAC/FP,EAASX,EAAsB,CAAC,IAAOc,EAAME,OAAO3B,KAAM,MAASyB,EAAME,OAAOE,WAGpF,OACI,qBAAKC,UAAW,WAAhB,SACI,cAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACI,eAACC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAWF,UAAU,SAArB,0CACKpC,EAAyBuC,KAAI,SAACC,EAAiBC,GAC5C,OAAO,cAACC,EAAA,EAAD,CAEHC,QAAS,cAACC,EAAA,EAAD,CAAUX,QAAST,EAAoBgB,GAAkBK,SAAUjB,EAAyBxB,KAAMoC,IAC3GM,MAAON,GAFFC,aCVlBM,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAACX,EAAD,OCKSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLDQ,EAActD,YAAY,CACnCC,KAAM,SACNC,aAAc,CACVqD,cAAe,IAEnB5C,SAAU,CACN6C,iBAAkB,SAAC3C,EAAOC,GACtBD,EAAM0C,cAAgBzC,EAAOC,YAS1BuC,GAJqBA,EAAYrC,QAAjCuC,iBAIAF,EAAf,SCdeG,cAAe,CAC1BC,QAAS,CACLC,OAAQC,EACRzC,SAAU0C,KCClBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5BtB,M","file":"static/js/main.78033f5d.chunk.js","sourcesContent":["export const ALL_CONJUGATION_SETTINGS = [\"Present/Future\", \"Past\"];\n\nexport const CONJUGATION_SETTINGS_KEY = \"settings:conjugations:\";\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport {ALL_CONJUGATION_SETTINGS, CONJUGATION_SETTINGS_KEY} from \"../../utility/constants\";\n\nexport const settingsSlice = createSlice({\n    name: \"settings\",\n    initialState: {\n        conjugations: ALL_CONJUGATION_SETTINGS.reduce((o, key) => ({...o, [key]: JSON.parse(localStorage.getItem(CONJUGATION_SETTINGS_KEY + key) ?? \"true\")}), {})\n    },\n    reducers: {\n        setConjugationSetting: (state, action) => {\n            state.conjugations[action.payload.key] = action.payload.value;\n        }\n    }\n});\n\nexport const { setConjugationSetting } = settingsSlice.actions;\n\nexport const selectConjugationSettings = state => state.settings.conjugations;\n\nexport default settingsSlice.reducer;\n\n","import React from \"react\";\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel} from \"@material-ui/core\";\nimport {selectConjugationSettings, setConjugationSetting} from \"../../redux/slices/settingsSlice\";\nimport {ALL_CONJUGATION_SETTINGS, CONJUGATION_SETTINGS_KEY} from \"../../utility/constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nexport default function Settings() {\n    const conjugationSettings = useSelector(selectConjugationSettings)\n    const dispatch = useDispatch()\n\n    function handleConjugationChange(event) {\n        localStorage.setItem(CONJUGATION_SETTINGS_KEY + event.target.name, JSON.stringify(event.target.checked));\n        dispatch(setConjugationSetting({\"key\": event.target.name, \"value\": event.target.checked}));\n    }\n\n    return (\n        <div className={\"settings\"}>\n            <FormControl component=\"fieldset\">\n                <FormGroup>\n                <FormLabel component=\"legend\">Conjugations/Transformations</FormLabel>\n                    {ALL_CONJUGATION_SETTINGS.map((conjugationName, conjugationIndex) => {\n                        return <FormControlLabel\n                            key={conjugationIndex}\n                            control={<Checkbox checked={conjugationSettings[conjugationName]} onChange={handleConjugationChange} name={conjugationName} />}\n                            label={conjugationName}\n                        />\n                    })}\n                </FormGroup>\n            </FormControl>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Settings from \"../Settings/Settings\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Settings />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice} from \"@reduxjs/toolkit\";\n\nexport const answerSlice = createSlice({\n    name: \"answer\",\n    initialState: {\n        writtenAnswer: \"\"\n    },\n    reducers: {\n        setWrittenAnswer: (state, action) => {\n            state.writtenAnswer = action.payload\n        }\n    }\n});\n\nexport const { setWrittenAnswer } = answerSlice.actions;\n\nexport const selectWrittenAnswer = state => state.answer.writtenAnswer;\n\nexport default answerSlice.reducer;\n\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport answerReducer from \"./slices/answerSlice\";\nimport settingsReducer from \"./slices/settingsSlice\";\n\nexport default configureStore({\n    reducer: {\n        answer: answerReducer,\n        settings: settingsReducer\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}